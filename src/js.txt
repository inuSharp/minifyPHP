
const WEB_ROOT = '@WEB_ROOT';

class App {

  static start() {
    Tab.select(document.getElementById('default_tab'), 'tab_memo');
  }

}

class Tab {

  static #tabs = ['tab_memo', 'tab_command'];

  static select(elm, id) {
    for (const tabContent of this.#tabs) {
      document.getElementById(tabContent).style.display='none';
    }
    document.getElementById(id).style.display='';

    for (const tab of document.getElementsByClassName('tab')) {
      tab.classList.remove('is_active');
    }
    elm.classList.add('is_active');

    this.initTab(id);
  }

  static initTab(id) {
    switch (id) {
      case 'tab_memo':
        Memo.fetchIndexes();
        Memo.searchMemo();
        break;
    }
  }
}

class Memo {
  static async changeIndex() {
    const indexes = document.getElementsByName('checkIndex');
    for (const index of indexes) {
      if (index.checked) {
        console.log(index.value);
      }
    }
  }

  static async fetchIndexes() {
    const data = await Api.fetchMemoIndex();
    document.getElementById('memo_index').innerHTML = data.result;
  }

  static async searchMemo() {
    const data = await Api.searchMemo();
    document.getElementById('memo').innerHTML = data.result;
  }
}

class Api {
  static async get(url) {
    const response = await fetch(WEB_ROOT + url);

    if (!response.ok) {
      const data = await response.json();
      const error = {
        status: response.status,
        body: data
      }
      console.log(error);
      throw error;
    }

    const data = await response.json();
    return data;
  }

  static async fetchMemoIndex() {
    return await this.get('/api/memo/index');
  }

  static async searchMemo() {
    return await this.get('/api/memo/search?w=');
  }
}

window.setTimeout(() => {
  App.start();
}, 100);

